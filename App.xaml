<Application x:Class="ExplorerPro.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ExplorerPro">
    <!-- Remove StartupUri attribute - we create MainWindow programmatically in OnStartup -->
    <Application.Resources>
        <!-- Application resources use merged dictionaries for theme support -->
        <ResourceDictionary>
            <!-- The ThemeManager will dynamically manage these dictionaries at runtime -->
            <ResourceDictionary.MergedDictionaries>
                <!-- Intentionally empty - ThemeManager will populate dynamically -->
            </ResourceDictionary.MergedDictionaries>
            
            <!-- Global resource references for theme-aware controls -->
            <!-- Default styles that apply the theme resources -->
            <Style TargetType="{x:Type Window}" BasedOn="{StaticResource {x:Type Window}}">
                <Setter Property="Background" Value="{DynamicResource WindowBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
            </Style>
            
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForeground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorder}"/>
            </Style>
            
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="Background" Value="{DynamicResource TextBoxBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextBoxForeground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorder}"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderHover}"/>
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderFocused}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="Background" Value="{DynamicResource ComboBoxBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource ComboBoxForeground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorder}"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderHover}"/>
                    </Trigger>
                    <Trigger Property="IsDropDownOpen" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderFocused}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListView}}">
                <Setter Property="Background" Value="{DynamicResource ListViewBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ListViewBorder}"/>
            </Style>
            
            <Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Type TreeView}}">
                <Setter Property="Background" Value="{DynamicResource TreeViewBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TreeViewBorder}"/>
            </Style>
            
            <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{DynamicResource TreeViewItemSelectedBackground}"/>
                        <Setter Property="Foreground" Value="{DynamicResource TreeViewItemSelectedForeground}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="IsSelectionActive" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource TreeViewItemSelectedInactiveBackground}"/>
                        <Setter Property="Foreground" Value="{DynamicResource TreeViewItemSelectedInactiveForeground}"/>
                    </MultiTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource TreeViewItemHoverBackground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
                <Setter Property="Background" Value="{DynamicResource TabControlBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TabControlBorder}"/>
            </Style>
            
            <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
                <Setter Property="Background" Value="{DynamicResource TabBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TabBorderBrush}"/>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{DynamicResource TabSelectedBackground}"/>
                        <Setter Property="Foreground" Value="{DynamicResource TabSelectedForeground}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource TabSelectedBorderBrush}"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource TabHoverBackground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}">
                <Setter Property="Background" Value="{DynamicResource MenuBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource MenuBorderBrush}"/>
            </Style>
            
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                <Setter Property="Background" Value="{DynamicResource MenuItemBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                <Style.Triggers>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter Property="Background" Value="{DynamicResource MenuItemHighlightedBackground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
                <Setter Property="Background" Value="{DynamicResource ContextMenuBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ContextMenuBorder}"/>
            </Style>
            
            <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource {x:Type ToolTip}}">
                <Setter Property="Background" Value="{DynamicResource ToolTipBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource ToolTipText}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ToolTipBorder}"/>
            </Style>
            
            <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Type GridSplitter}}">
                <Setter Property="Background" Value="{DynamicResource GridSplitterBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource GridSplitterBorder}"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource GridSplitterHighlight}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource {x:Type ScrollBar}}">
                <Setter Property="Background" Value="{DynamicResource ScrollBarTrackBackground}"/>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Width" Value="12"/>
                        <Setter Property="MinWidth" Value="12"/>
                    </Trigger>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Height" Value="12"/>
                        <Setter Property="MinHeight" Value="12"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <!-- Custom Style for TextBlocks to ensure they always use theme colors -->
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource SubtleTextColor}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>