<!-- Updated Resources/FileTreeResources.xaml with improved theme handling -->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ExplorerPro.UI.FileTree">

    <!-- Tree Line Colors - now using DynamicResource for proper theme switching -->
    <SolidColorBrush x:Key="TreeLineColor" Color="#C0C0C0"/>
    <SolidColorBrush x:Key="TreeLineHighlightColor" Color="#0078D7"/>

    <!-- Windows 11 Style Expander Button Template -->
    <Style x:Key="Windows11ExpanderStyle" TargetType="ToggleButton">
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Margin" Value="0,0,4,0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Width="16" Height="16" 
                           Background="Transparent"
                           BorderThickness="0">
                        <Path x:Name="ExpanderArrow"
                             Stroke="{DynamicResource TextColor}"
                             Fill="{DynamicResource TextColor}"
                             StrokeThickness="1.5"
                             Data="M 4,6 L 8,10 L 12,6"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center">
                            <Path.RenderTransform>
                                <RotateTransform x:Name="ExpanderRotate" 
                                               Angle="0" 
                                               CenterX="8" 
                                               CenterY="8"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpanderRotate" Property="Angle" Value="180"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ExpanderArrow" Property="Stroke" Value="{DynamicResource TreeLineHighlightColor}"/>
                            <Setter TargetName="ExpanderArrow" Property="Fill" Value="{DynamicResource TreeLineHighlightColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Improved TreeViewItem Style with Dynamic Resources for Theme Support -->
    <Style x:Key="TreeViewItemWithLines" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        
                        <!-- Item Content with Background for Selection -->
                        <Border x:Name="Bd" 
                               Grid.Row="0"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               Padding="{TemplateBinding Padding}"
                               SnapsToDevicePixels="True">
                            
                            <ContentPresenter x:Name="PART_Header"
                                            ContentSource="Header"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        
                        <!-- ItemsPresenter for Children -->
                        <ItemsPresenter x:Name="ItemsHost" 
                                      Grid.Row="1" 
                                      Visibility="Collapsed"/>
                    </Grid>
                    
                    <ControlTemplate.Triggers>
                        <!-- Expanding/Collapsing Trigger -->
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        
                        <!-- Selection Triggers -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource TreeViewItemSelectedBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TreeViewItemSelectedForeground}"/>
                        </Trigger>
                        
                        <!-- Hover Effect -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource TreeViewItemHoverBackground}"/>
                        </MultiTrigger>
                        
                        <!-- Inactive Selection -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource TreeViewItemSelectedInactiveBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TreeViewItemSelectedInactiveForeground}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- Level-specific styling can be added here if needed -->
        </Style.Triggers>
    </Style>

    <!-- Custom Style for GridViewColumns to ensure proper theming -->
    <Style x:Key="TreeGridViewColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="Padding" Value="5,2"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TreeViewItemHoverBackground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource TreeViewItemSelectedBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TreeViewItemSelectedForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- TextBox Style within File Tree (for rename operations) -->
    <Style x:Key="FileTreeTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource TextBoxBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForeground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderFocused}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ListViewItem Style for file list view (when not using tree view) -->
    <Style x:Key="FileListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="2"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource TreeViewItemSelectedBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TreeViewItemSelectedForeground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource TreeViewItemSelectedInactiveBackground}"/>
                <Setter Property="Foreground" Value="{DynamicResource TreeViewItemSelectedInactiveForeground}"/>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TreeViewItemHoverBackground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Context Menu Style -->
    <Style x:Key="FileTreeContextMenuStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource ContextMenuBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ContextMenuBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    
    <!-- Context Menu Item Style -->
    <Style x:Key="FileTreeContextMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Style.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{DynamicResource MenuItemHighlightedBackground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>