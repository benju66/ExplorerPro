<!-- UI/FileTree/Resources/FileTreeResources.xaml -->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ExplorerPro.UI.FileTree.DragDrop">
    
    <!-- Tree Line Colors -->
    <SolidColorBrush x:Key="TreeLineColor" Color="#CCCCCC"/>
    <SolidColorBrush x:Key="TreeLineHighlightColor" Color="#0083DB"/>
    
    <!-- Selection Colors -->
    <SolidColorBrush x:Key="SelectionBackgroundColor" Color="#CCE8FF"/>
    <SolidColorBrush x:Key="SelectionBorderColor" Color="#0078D7"/>
    <SolidColorBrush x:Key="MultiSelectionBackgroundColor" Color="#E5F3FF"/>
    <SolidColorBrush x:Key="InactiveSelectionBackgroundColor" Color="#F0F0F0"/>
    
    <!-- Drop Target Colors -->
    <SolidColorBrush x:Key="DropTargetBackgroundColor" Color="#E8F5E8"/>
    <SolidColorBrush x:Key="DropTargetBorderColor" Color="#4CAF50"/>
    <SolidColorBrush x:Key="InvalidDropTargetBackgroundColor" Color="#FFE8E8"/>
    <SolidColorBrush x:Key="InvalidDropTargetBorderColor" Color="#F44336"/>
    
    <!-- Column Resize Preview Style -->
    <Style x:Key="ColumnResizePreviewStyle" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Rectangle Fill="{DynamicResource TreeLineHighlightColor}" 
                              Width="2" 
                              Opacity="0.7"
                              VerticalAlignment="Stretch"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Drop Insertion Indicator Style -->
    <Style x:Key="DropInsertionIndicatorStyle" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid>
                        <Rectangle Height="2" Fill="{DynamicResource DropTargetBorderColor}" />
                        <Path Data="M 0,0 L 4,4 L 0,8 Z" 
                              Fill="{DynamicResource DropTargetBorderColor}"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- TreeViewItem Style with Connecting Lines and Enhanced Selection -->
    <Style x:Key="TreeViewItemWithLines" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <!-- CRITICAL: Bind TreeViewItem.IsSelected to the data model's IsSelected -->
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        
                        <!-- Selection/Drop Target Background -->
                        <Border x:Name="SelectionBorder" 
                                Grid.Column="0" Grid.ColumnSpan="2"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                CornerRadius="2"/>
                        
                        <!-- TreeViewItem Content -->
                        <Border x:Name="Bd" 
                                Grid.Column="0" Grid.ColumnSpan="2"
                                Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header" 
                                            ContentSource="Header"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        
                        <!-- Children Items -->
                        <ItemsPresenter x:Name="ItemsHost" 
                                       Grid.Row="1" 
                                       Grid.Column="0"
                                       Grid.ColumnSpan="2"
                                       Visibility="Collapsed"/>
                    </Grid>
                    
                    <ControlTemplate.Triggers>
                        <!-- Expanded State -->
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        
                        <!-- No Items -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        
                        <!-- Selected State -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="SelectionBorder" Property="Background" Value="{DynamicResource SelectionBackgroundColor}"/>
                            <Setter TargetName="SelectionBorder" Property="BorderBrush" Value="{DynamicResource SelectionBorderColor}"/>
                            <Setter TargetName="SelectionBorder" Property="BorderThickness" Value="1"/>
                        </Trigger>
                        
                        <!-- Multi-Selected State (using IsSelectedInMulti from data) -->
                        <DataTrigger Binding="{Binding IsSelectedInMulti}" Value="true">
                            <Setter TargetName="SelectionBorder" Property="Background" Value="{DynamicResource MultiSelectionBackgroundColor}"/>
                            <Setter TargetName="SelectionBorder" Property="BorderBrush" Value="{DynamicResource SelectionBorderColor}"/>
                            <Setter TargetName="SelectionBorder" Property="BorderThickness" Value="1"/>
                        </DataTrigger>
                        
                        <!-- Inactive Selection -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SelectionBorder" Property="Background" Value="{DynamicResource InactiveSelectionBackgroundColor}"/>
                            <Setter TargetName="SelectionBorder" Property="BorderBrush" Value="Transparent"/>
                        </MultiTrigger>
                        
                        <!-- Hover State -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="SelectionBorder" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="#F0F0F0" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        
                        <!-- Drop Target State -->
                        <Trigger Property="local:DragDropHelper.IsDropTarget" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation 
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            To="#E8F5E8"
                                            Duration="0:0:0.2"/>
                                        <ColorAnimation 
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="#4CAF50"
                                            Duration="0:0:0.2"/>
                                        <ThicknessAnimation
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="BorderThickness"
                                            To="2"
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation 
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            Duration="0:0:0.2"/>
                                        <ColorAnimation 
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            Duration="0:0:0.2"/>
                                        <ThicknessAnimation
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="BorderThickness"
                                            To="0"
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        
                        <!-- Invalid Drop Target State -->
                        <Trigger Property="local:DragDropHelper.IsInvalidDropTarget" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation 
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            To="#FFE8E8"
                                            Duration="0:0:0.2"/>
                                        <ColorAnimation 
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="#F44336"
                                            Duration="0:0:0.2"/>
                                        <ThicknessAnimation
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="BorderThickness"
                                            To="2"
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation 
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            Duration="0:0:0.2"/>
                                        <ColorAnimation 
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            Duration="0:0:0.2"/>
                                        <ThicknessAnimation
                                            Storyboard.TargetName="SelectionBorder"
                                            Storyboard.TargetProperty="BorderThickness"
                                            To="0"
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        
                        <!-- Disabled State -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Windows 11 Style Expander -->
    <Style x:Key="Windows11ExpanderStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="12"/>
        <Setter Property="Height" Value="12"/>
        <Setter Property="Margin" Value="3,0,3,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Path x:Name="ExpanderArrow"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M 0 0 L 5 5 L 0 10"
                                  Stroke="{DynamicResource TextColor}"
                                  StrokeThickness="1.5">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="0" CenterX="2.5" CenterY="5"/>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderArrow"
                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                       To="90"
                                                       Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderArrow"
                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                       To="0"
                                                       Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#10000000"/>
                            <Setter TargetName="ExpanderArrow" Property="Stroke" Value="{DynamicResource TreeLineHighlightColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Column Header Style -->
    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="Padding" Value="6,3"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#10000000"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#20000000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- GridSplitter Style for Column Resizing -->
    <Style x:Key="ColumnResizerStyle" TargetType="GridSplitter">
        <Setter Property="Width" Value="5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TreeLineHighlightColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Multi-Selection Checkbox Style -->
    <Style x:Key="MultiSelectCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Margin" Value="2,0,4,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="IsChecked" Value="{Binding IsSelectedInMulti, Mode=TwoWay}"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeView}, Path=Tag}" Value="MultiSelect">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>